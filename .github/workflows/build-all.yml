name: Build and Publish All Containers

on:
  push:
    branches: [ main, master ]
    paths:
      - '.github/workflows/build-all.yml'
      - 'docker-compose.yml'
  release:
    types: [ published ]
  workflow_dispatch:
    inputs:
      tag:
        description: 'Tag to apply (default: latest)'
        required: false
        default: 'latest'

env:
  REGISTRY: ghcr.io
  API_IMAGE_NAME: pixeletica-api
  WORKER_IMAGE_NAME: pixeletica-worker

jobs:
  build-and-push:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write

    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Log in to the Container registry
        if: github.event_name != 'pull_request'
        uses: docker/login-action@v2
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
      
      # Determine the tag to use
      - name: Determine tag
        id: set_tag
        run: |
          if [ "${{ github.event_name }}" = "workflow_dispatch" ]; then
            echo "TAG=${{ github.event.inputs.tag }}" >> $GITHUB_OUTPUT
          elif [ "${{ github.event_name }}" = "release" ]; then
            echo "TAG=${{ github.event.release.tag_name }}" >> $GITHUB_OUTPUT
          else
            echo "TAG=latest" >> $GITHUB_OUTPUT
          fi

      # Build and push API image
      - name: Build and push API image
        uses: docker/build-push-action@v4
        with:
          context: .
          file: ./Dockerfile
          push: ${{ github.event_name != 'pull_request' }}
          tags: ${{ env.REGISTRY }}/${{ env.API_IMAGE_NAME }}:${{ steps.set_tag.outputs.TAG }}
          cache-from: type=gha,scope=api
          cache-to: type=gha,mode=max,scope=api

      # Build and push Worker image
      - name: Build and push Worker image
        uses: docker/build-push-action@v4
        with:
          context: .
          file: ./src/docker/worker.dockerfile
          push: ${{ github.event_name != 'pull_request' }}
          tags: ${{ env.REGISTRY }}/${{ env.WORKER_IMAGE_NAME }}:${{ steps.set_tag.outputs.TAG }}
          cache-from: type=gha,scope=worker
          cache-to: type=gha,mode=max,scope=worker