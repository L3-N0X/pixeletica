services:
  api:
    image: ghcr.io/l3-n0x/pixeletica-api:latest
    container_name: pixeletica_api
    environment:
      # API configuration
      - PIXELETICA_API_HOST=0.0.0.0
      - PIXELETICA_API_PORT=8000
      - REDIS_URL=redis://redis:6379/0
      - WAIT_FOR_REDIS=true
      - LOG_LEVEL=debug
      - MAX_UPLOAD_SIZE=10485760
      - CORS_ORIGINS=http://localhost:5000,https://localhost:5000
    # Uncomment to restart automatically on failure
    restart: unless-stopped

    depends_on:
      - redis

    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 15s

    # Uncomment to expose additional ports
    ports:
      - "8000:8000"

    networks:
      - pxl-net

    volumes:
      # - ./pixeletica:/app/pixeletica
      - pixeletica_tasks_data:/app/tasks # Use named volume for tasks
      # - ./pixeletica_output:/app/out
    deploy:
      resources:
        limits:
          cpus: "1"
          memory: 1G
        reservations:
          cpus: "0.25"
          memory: 256M

  worker:
    image: ghcr.io/l3-n0x/pixeletica-worker:latest
    container_name: pixeletica_worker
    environment:
      # Worker configuration
      - REDIS_URL=redis://redis:6379/0
      - CELERY_RESULT_BACKEND=redis://redis:6379/0
      - CELERY_BROKER_URL=redis://redis:6379/0
      - WAIT_FOR_REDIS=true
      - LOG_LEVEL=debug

      # Concurrency settings

      # Task time limits
      - CELERY_TASK_TIME_LIMIT=300 # 5 minutes
      - CELERY_TASK_SOFT_TIME_LIMIT=0 # No soft time limit
      - CELERY_CONCURRENCY=1
      - CELERY_MAX_TASKS_PER_CHILD=100
    depends_on:
      - redis
    healthcheck:
      test:
        [
          "CMD",
          "celery",
          "-A",
          "pixeletica.api.services.task_queue.celery_app",
          "inspect",
          "ping",
          "-d",
          "celery@$$(hostname)",
        ]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 30s
    # Uncomment to restart automatically on failure
    restart: unless-stopped

    networks:
      - pxl-net

    volumes:
      # - ./pixeletica:/app/pixeletica
      - pixeletica_tasks_data:/app/tasks # Use named volume for tasks
      # - ./pixeletica_output:/app/out
    deploy:
      resources:
        limits:
          cpus: "2"
          memory: 2G
        reservations:
          cpus: "0.5"
          memory: 512M
      replicas: 1
    command:
      - celery
      - -A
      - pixeletica.api.services.task_queue.celery_app
      - worker
      - --loglevel=info
      - --without-mingle
      - --without-gossip

  redis:
    # Use Alpine for smaller image or full Redis for more features
    image: redis:7-alpine
    container_name: redis
    hostname: redis

    # Redis server configuration
    command: redis-server --appendonly yes --maxmemory 256mb --maxmemory-policy volatile-lru

    # Uncomment for custom Redis configuration
    volumes:
      - ./config/redis.conf:/usr/local/etc/redis/redis.conf
      - ./redis_data:/data
    restart: unless-stopped

    networks:
      - pxl-net

    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      timeout: 10s
      retries: 5

volumes: # Define named volumes
  pixeletica_tasks_data:
  redis_data: # Assuming you might want redis data persisted too, keeping from example

networks:
  pxl-net:
    driver: bridge
